package com.example.meuappfirebase

import android.app.Application
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.apol.myapplication.AppDatabase
import com.apol.myapplication.data.model.User
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.ktx.auth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

/**
 * Classe de dados para representar o estado da UI (Carregando, Erro, Sucesso).
 * Usada para comunicar o status das opera√ß√µes do ViewModel para as Activities.
 */
data class AuthUiState(
    val isLoading: Boolean = false,
    val error: String? = null
)

/**
 * ViewModel principal que gerencia toda a l√≥gica de autentica√ß√£o e perfil de usu√°rio.
 * Ele conversa com o Firebase (Auth e Firestore) e tamb√©m com o banco de dados local (Room).
 */
class AuthViewModel(application: Application) : AndroidViewModel(application) {

    private val auth: FirebaseAuth = Firebase.auth
    private val firestore = Firebase.firestore
    // Acesso ao DB Room completo
    private val appDb = AppDatabase.getDatabase(application)
    private val userDao = appDb.userDao()
    private val habitoDao = appDb.habitoDao()

    // O mapa de h√°bitos agora vive aqui, junto com a l√≥gica de neg√≥cio.
    private val mapaDeHabitosRuins = mapOf(
        "Fumar" to "üö≠ Fumar Menos",
        "Beber" to "üö± N√£o Beber",
        "Sono ruim" to "üò¥ Dormir Melhor",
        "Procrastina√ß√£o" to "‚úÖ N√£o Procrastinar",
        "Uso excessivo do celular" to "üìµ Usar Menos o Celular"
    )

    private val _uiState = MutableStateFlow(AuthUiState())
    val uiState: StateFlow<AuthUiState> = _uiState.asStateFlow()

    /**
     * Registra um novo usu√°rio no Firebase Auth e envia um e-mail de verifica√ß√£o.
     */
    fun signUp(email: String, pass: String, onSuccess: () -> Unit) {
        _uiState.value = AuthUiState(isLoading = true)
        auth.createUserWithEmailAndPassword(email, pass)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    task.result?.user?.sendEmailVerification()
                        ?.addOnCompleteListener { verificationTask ->
                            if (verificationTask.isSuccessful) {
                                Log.d("EmailVerification", "E-mail de verifica√ß√£o enviado com sucesso.")
                                _uiState.value = AuthUiState(isLoading = false)
                                onSuccess()
                            } else {
                                Log.w("EmailVerification", "Falha ao enviar e-mail.", verificationTask.exception)
                                _uiState.value = AuthUiState(isLoading = false, error = "Falha ao enviar e-mail de verifica√ß√£o.")
                            }
                        }
                } else {
                    _uiState.value = AuthUiState(
                        isLoading = false,
                        error = task.exception?.message ?: "Ocorreu um erro no cadastro."
                    )
                }
            }
    }

    /**
     * Faz o login de um usu√°rio e verifica no Firestore se o perfil dele est√° completo.
     */
    fun login(
        email: String,
        pass: String,
        onLoginSuccess: (profileIsComplete: Boolean) -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        auth.signInWithEmailAndPassword(email, pass)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val user = auth.currentUser
                    if (user != null && user.isEmailVerified) {
                        firestore.collection("usuarios").document(user.uid).get()
                            .addOnSuccessListener { document ->
                                val profileIsComplete = document != null && document.exists() && !document.getString("nome").isNullOrEmpty()
                                onLoginSuccess(profileIsComplete)
                                _uiState.value = AuthUiState(isLoading = false)
                            }
                            .addOnFailureListener {
                                onLoginSuccess(false)
                                _uiState.value = AuthUiState(isLoading = false)
                            }
                    } else {
                        auth.signOut()
                        _uiState.value = AuthUiState(isLoading = false, error = "Por favor, verifique seu e-mail antes de fazer login.")
                    }
                } else {
                    _uiState.value = AuthUiState(
                        isLoading = false,
                        error = task.exception?.message ?: "E-mail ou senha inv√°lidos."
                    )
                }
            }
    }

    /**
     * Salva o perfil do usu√°rio (tela infousuario) no Firestore e no Room.
     */
    fun saveUserProfileToFirestoreAndRoom(
        firestoreProfile: UserProfile,
        roomUser: User,
        onSuccess: () -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        firestore.collection("usuarios").document(firestoreProfile.uid)
            .set(firestoreProfile)
            .addOnSuccessListener {
                Log.d("Sync", "Perfil salvo com sucesso no Firestore.")
                viewModelScope.launch {
                    userDao.insertUser(roomUser)
                    Log.d("Sync", "Perfil salvo com sucesso no Room DB.")
                    _uiState.value = AuthUiState(isLoading = false)
                    onSuccess()
                }
            }
            .addOnFailureListener { e ->
                _uiState.value = AuthUiState(
                    isLoading = false,
                    error = "Erro ao salvar perfil na nuvem: ${e.message}"
                )
            }
    }

    /**
     * Salva os h√°bitos iniciais do usu√°rio (tela livro) no Firestore e no Room.
     */
    fun saveUserInitialHabits(
        ler: Boolean,
        dieta: Boolean,
        seguirDieta: Boolean,
        onSuccess: () -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        val user = auth.currentUser
        if (user == null) {
            _uiState.value = AuthUiState(isLoading = false, error = "Nenhum usu√°rio logado.")
            return
        }
        val habitsMap = mapOf(
            "temHabitoLeitura" to ler,
            "segueDieta" to dieta,
            "gostariaSeguirDieta" to seguirDieta
        )
        firestore.collection("usuarios").document(user.uid)
            .update(habitsMap)
            .addOnSuccessListener {
                Log.d("Sync", "H√°bitos iniciais salvos no Firestore.")
                viewModelScope.launch {
                    val roomUser = userDao.getUserById(user.uid)
                    roomUser?.let {
                        it.temHabitoLeitura = ler
                        it.segueDieta = dieta
                        it.gostariaSeguirDieta = seguirDieta
                        userDao.updateUser(it)
                        Log.d("Sync", "H√°bitos iniciais atualizados no Room.")
                    }
                    _uiState.value = AuthUiState(isLoading = false)
                    onSuccess()
                }
            }
            .addOnFailureListener { e ->
                _uiState.value = AuthUiState(
                    isLoading = false,
                    error = "Erro ao salvar h√°bitos: ${e.message}"
                )
            }
    }

    /**
     * CORRIGIDO: Salva as respostas de sa√∫de mental (tela saudemental) no perfil do usu√°rio
     * E CRIA os h√°bitos correspondentes diretamente na cole√ß√£o 'habitos' do Firestore.
     */
    fun saveMentalHealthAndCreateLocalHabits(
        habitosParaMudar: List<String>,
        problemasEmocionais: List<String>,
        onSuccess: () -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        val user = auth.currentUser
        if (user == null) {
            _uiState.value = AuthUiState(isLoading = false, error = "Nenhum usu√°rio logado.")
            return
        }
        val mentalHealthMap = mapOf(
            "habitosParaMudar" to habitosParaMudar,
            "problemasEmocionais" to problemasEmocionais
        )
        // Primeiro, atualiza o perfil do usu√°rio com as respostas
        firestore.collection("usuarios").document(user.uid)
            .update(mentalHealthMap)
            .addOnSuccessListener {
                Log.d("Sync", "Dados de sa√∫de mental salvos no Firestore.")
                // Em seguida, cria os h√°bitos na cole√ß√£o 'habitos', que √© a fonte de dados da sua tela de h√°bitos.
                viewModelScope.launch {
                    val novasMetas = habitosParaMudar.mapNotNull { mapaDeHabitosRuins[it] }
                    if (novasMetas.isEmpty()) {
                        Log.d("Sync", "Nenhum novo h√°bito para criar a partir do question√°rio.")
                        _uiState.value = AuthUiState(isLoading = false)
                        onSuccess()
                        return@launch
                    }

                    // Usamos um WriteBatch para salvar todos os novos h√°bitos de uma s√≥ vez de forma eficiente
                    val batch = firestore.batch()
                    val allDays = listOf("SUN","MON","TUE","WED","THU","FRI","SAT")

                    novasMetas.forEach { nomeDoHabito ->
                        // Cria uma refer√™ncia para um novo documento com ID autom√°tico na cole√ß√£o 'habitos'
                        val novoHabitoDocRef = firestore.collection("habitos").document()
                        val habitoData = hashMapOf(
                            "userOwnerId" to user.uid,
                            "nome" to nomeDoHabito,
                            "isFavorito" to false,
                            "isGoodHabit" to false, // Os h√°bitos a serem mudados s√£o "ruins" (a meta √© super√°-los)
                            "diasProgramados" to allDays,
                            "progresso" to emptyList<String>()
                        )
                        batch.set(novoHabitoDocRef, habitoData)
                    }

                    // Envia todas as opera√ß√µes para o Firestore de uma vez
                    batch.commit()
                        .addOnSuccessListener {
                            Log.d("Sync", "${novasMetas.size} novos h√°bitos criados com sucesso no Firestore.")
                            _uiState.value = AuthUiState(isLoading = false)
                            onSuccess()
                        }
                        .addOnFailureListener { e ->
                            _uiState.value = AuthUiState(isLoading = false, error = "Erro ao criar h√°bitos no Firestore: ${e.message}")
                        }
                }
            }
            .addOnFailureListener { e ->
                _uiState.value = AuthUiState(
                    isLoading = false,
                    error = "Erro ao salvar dados de sa√∫de mental na nuvem: ${e.message}"
                )
            }
    }

    /**
     * Salva as prefer√™ncias de treino do usu√°rio (tela pergunta01) no Firestore e no Room.
     */
    fun saveWorkoutPreferences(
        praticaAtividade: String,
        tempoDisponivel: String,
        espacos: List<String>,
        onSuccess: () -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        val user = auth.currentUser
        if (user == null) {
            _uiState.value = AuthUiState(isLoading = false, error = "Nenhum usu√°rio logado.")
            return
        }
        val preferencesMap = mapOf(
            "praticaAtividade" to praticaAtividade,
            "tempoDisponivel" to tempoDisponivel,
            "espacosDisponiveis" to espacos
        )
        firestore.collection("usuarios").document(user.uid)
            .update(preferencesMap)
            .addOnSuccessListener {
                Log.d("Sync", "Prefer√™ncias de treino salvas no Firestore.")
                viewModelScope.launch {
                    val roomUser = userDao.getUserById(user.uid)
                    roomUser?.let {
                        it.praticaAtividade = praticaAtividade
                        it.tempoDisponivel = tempoDisponivel
                        it.espacosDisponiveis = espacos
                        userDao.updateUser(it)
                        Log.d("Sync", "Prefer√™ncias de treino atualizadas no Room.")
                    }
                    _uiState.value = AuthUiState(isLoading = false)
                    onSuccess()
                }
            }
            .addOnFailureListener { e ->
                _uiState.value = AuthUiState(
                    isLoading = false,
                    error = "Erro ao salvar prefer√™ncias: ${e.message}"
                )
            }
    }

    /**
     * Salva as prefer√™ncias de sugest√£o do usu√°rio (tela sujestao) no Firestore e no Room.
     */
    fun saveSuggestionPreferences(
        interesses: List<String>,
        onSuccess: () -> Unit
    ) {
        _uiState.value = AuthUiState(isLoading = true)
        val user = auth.currentUser
        if (user == null) {
            _uiState.value = AuthUiState(isLoading = false, error = "Nenhum usu√°rio logado.")
            return
        }
        val preferencesMap = mapOf("sugestoesInteresse" to interesses)
        firestore.collection("usuarios").document(user.uid)
            .update(preferencesMap)
            .addOnSuccessListener {
                Log.d("Sync", "Prefer√™ncias de sugest√£o salvas no Firestore.")
                viewModelScope.launch {
                    val roomUser = userDao.getUserById(user.uid)
                    roomUser?.let {
                        it.sugestoesInteresse = interesses
                        userDao.updateUser(it)
                        Log.d("Sync", "Prefer√™ncias de sugest√£o atualizadas no Room.")
                    }
                    _uiState.value = AuthUiState(isLoading = false)
                    onSuccess()
                }
            }
            .addOnFailureListener { e ->
                _uiState.value = AuthUiState(
                    isLoading = false,
                    error = "Erro ao salvar prefer√™ncias: ${e.message}"
                )
            }
    }

    /**
     * Envia um e-mail de redefini√ß√£o de senha para o usu√°rio logado.
     */
    fun sendPasswordResetEmail(onSuccess: () -> Unit) {
        val user = auth.currentUser
        if (user?.email == null) {
            _uiState.value = AuthUiState(error = "Nenhum usu√°rio logado ou e-mail associado.")
            return
        }
        auth.sendPasswordResetEmail(user.email!!)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    onSuccess()
                } else {
                    _uiState.value = AuthUiState(error = "Falha ao enviar e-mail: ${task.exception?.message}")
                }
            }
    }

    /**
     * Faz o logout do usu√°rio no Firebase.
     */
    fun logout() {
        auth.signOut()
    }

    /**
     * Retorna o usu√°rio atualmente logado no Firebase.
     */
    fun getCurrentUser(): FirebaseUser? {
        return auth.currentUser
    }

    /**
     * Retorna o usu√°rio atualmente salvo no Room.
     */
    suspend fun getCurrentUserFromRoom(): User? {
        return userDao.getCurrentUser()
    }
}